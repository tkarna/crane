#!/usr/bin/env python
"""
A script for generating time series plots of vertical profiles

Example:

makeProfilePlot -o run29/images/prof/ run29/data/track/AUV46_salt_trck_2012-05-04_2012-05-04.nc

Tuomas Karna 2012-11-28
"""
import datetime
import sys
from optparse import OptionParser

import numpy as np
import matplotlib.pyplot as plt

from crane.data import dataContainer

from crane.physicalVariableDefs import VARS
from crane.physicalVariableDefs import UNITS
from crane.utility import createDirectory
from crane.utility import saveFigure
from crane.utility import parseTimeStr
from crane.plotting import profilePlot

#-------------------------------------------------------------------------
# Main routine
#-------------------------------------------------------------------------


def plotProfile(
        userRunTag,
        ncfiles,
        imgDir,
        fPrefix='prof',
        filetype='png',
        startTime=None,
        endTime=None,
        userClim={},
        cmapDict={},
        **kwargs):

    imgDir = createDirectory(imgDir)

    # logScale flag
    logScaleVars = ['kine', 'vdff']
    # color range
    clim = {'salt': [0, 35],
            'temp': [5, 20],
            'kine': [-6, -0.5],
            'vdff': [-6, -0.5],
            'hvel': [-3.0, 3.0],
            'u': [-2.0, 2.0]}
    clim.update(userClim)

    dcs = []
    for f in ncfiles:
        dc = dataContainer.dataContainer.loadFromNetCDF(f)
        dcs.append(dc)

    if startTime or endTime:
        # restrict time window based on the given start/end time
        if not startTime:
            startTime = dcs[0].time.getDatetime(0)
        if not endTime:
            endTime = dcs[0].time.getDatetime(-1)
        for i in range(len(dcs)):
            dcs[i] = dcs[i].timeWindow(startTime, endTime, includeEnd=True)

    dia = profilePlot.stackProfileTimeSeriesDC(
        ylabel='depth', xlabel='', plotheight=3.2, **kwargs)

    for j, dc in enumerate(dcs):
        for i in range(dc.data.shape[1]):
            dci = dc.extractFields(i)
            var = dci.fieldNames[0]
            plotID = str(j) + '-' + str(i)
            if isinstance(cmapDict, dict):
                cmap = plt.get_cmap(cmapDict.get(var, 'Spectral_r'))
            else:
                cmap = plt.get_cmap(cmapDict)

            dia.addPlot(plotID, clabel=VARS.get(var, var),
                        clim=clim.get(var, None), unit=UNITS.get(var, '-'))
            dia.addSample(plotID, dci, cmap=cmap)
            trackTitle = dci.getMetaData('location')
            runTag = userRunTag if userRunTag else dci.getMetaData('tag')
            titleStr = ' '.join([trackTitle, runTag])
            dia.addTitle(titleStr, tag=plotID)
    dia.showColorBar()

    # save to disk
    varStr = '-'.join(list(set(dc.getMetaData('variable') for dc in dcs)))
    tagStr = '-'.join(list(set(dc.getMetaData('tag') for dc in dcs)))
    dateStr = dcs[0].time.getDatetime(0).strftime('%Y-%m-%d')
    dateStr += '_' + dcs[0].time.getDatetime(-1).strftime('%Y-%m-%d')
    file = '_'.join([fPrefix, trackTitle, tagStr, varStr, dateStr])
    saveFigure(imgDir, file, filetype, verbose=True, dpi=100)
    plt.close()


def parseCommandLine():
    usage = (
        'Usage: %prog -o [path] -r [runID] profileFile1 profileFile2 ...\n')

    parser = OptionParser(usage=usage)
    parser.add_option(
        '-s',
        '--start',
        action='store',
        type='string',
        dest='startTime',
        help='Date to start processing (Default: start of data)')
    parser.add_option(
        '-e',
        '--end',
        action='store',
        type='string',
        dest='endTime',
        help='Date to end processing (Default: end of data)')
    parser.add_option(
        '-o',
        '--imageDirectory',
        action='store',
        type='string',
        dest='imgDir',
        help='directory where generated images are stored')
    parser.add_option(
        '-r',
        '--runID',
        action='store',
        type='string',
        dest='runTag',
        help='Run ID, added in the plot title, e.g. run29 or "selfe k-e" (Default: tag stored in trackFile)')
    parser.add_option(
        '-c',
        '--clim',
        action='store',
        type='string',
        dest='climStr',
        help='Custom limits for color bar, a string like salt:0:30,kine:-6:-2')
    parser.add_option(
        '-M',
        '--colormap',
        action='store',
        type='string',
        dest='cmapStr',
        help='name of matplotlib colormap to use. Can be specified for each variable: hvel:RdBu_r,salt:Spectral_r',
        default='Spectral_r')
    parser.add_option('-n', '--nbins', action='store', type='int', default=13,
                      dest='nbins', help='number of bins in colormap')
    (options, args) = parser.parse_args()

    startTime = options.startTime
    endTime = options.endTime
    imgDir = options.imgDir
    runTag = options.runTag
    climStr = options.climStr
    cmapStr = options.cmapStr
    N = options.nbins

    if imgDir is None:
        parser.print_help()
        parser.error('imgDir undefined')
    if len(args) < 1:
        parser.print_help()
        parser.error('profileFile missing')

    if startTime:
        startTime = parseTimeStr(startTime)
    if endTime:
        endTime = parseTimeStr(endTime)

    clim = {}
    if climStr:
        for entry in climStr.split(','):
            var, vmin, vmax = entry.split(':')
            clim[var] = [float(vmin), float(vmax)]

    netCDFFiles = args

    if cmapStr:
        if len(cmapStr.split(',')) > 1:
            cmap = {}
            for entry in cmapStr.split(','):
                var, mapname = entry.split(':')
                cmap[var] = mapname
        else:
            cmap = str(cmapStr)

    plotProfile(runTag, netCDFFiles, imgDir, fPrefix='prof', filetype='png',
                startTime=startTime, endTime=endTime, userClim=clim,
                cmapDict=cmap, N=N)

if __name__ == '__main__':
    parseCommandLine()
